"""
Django settings for app_domainname project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

from dotenv import load_dotenv
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

load_dotenv()

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1', '82.202.138.125']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'pics_handler.apps.HomepageConfig',
    'orders.apps.OrdersConfig',
    'registration.apps.AuthenticationConfig',
    'whitenoise.runserver_nostatic',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'registration.middleware.JWTMiddleware',  # Middleware для управления JWT-токенами
]


ROOT_URLCONF = 'app_domainname.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'app_domainname.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',     # Используем PostgreSQL
        'NAME': os.getenv('DB_NAME'),                  # Имя базы данных
        'USER': os.getenv('DB_USER'),                  # Пользователь
        'PASSWORD': os.getenv('DB_PASSWORD'),          # Пароль
        'HOST': os.getenv('DB_HOST'),                  # Хост (по умолчанию localhost)
        'PORT': os.getenv('DB_PORT'),                  # Порт (по умолчанию 5432)
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Настройки аутентификации Django
AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Стандартный backend для проверки учетных данных
]

# Ключ для хранения токенов в сессии
JWT_SESSION_KEY = "jwt_tokens"


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'ru-RU'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [BASE_DIR / "static",]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles') # Папка для собранных статических файлов по команде collectstatic в докер
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
MEDIA_URL = '/media/'                         # URL для доступа к файлам
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')  # Путь на сервере для сохранения файлов
WHITENOISE_MEDIA_PREFIX = "/media/"

# Получаем переменную окружения для среды (если не установлена, по умолчанию 'development')
ENVIRONMENT = os.getenv('DJANGO_ENV', 'development')

# В зависимости от среды, присваиваем нужный URL
if ENVIRONMENT == 'production':
    BASE_FILE_URL = 'http://container_fastapi_app:8000/files'
    DRF_API_BASE_URL = "http://container_drf_app:8000/api"  # URL DRF-сервиса
    DRF_API_HOST = "app-drf"
    DEBUG = False
    # Для продакшн-режима Django будет обслуживать статические файлы
    # добавляет хеши к именам файлов, предотвращая кэширование устаревших версий файлов браузерами
    # STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
else:
    BASE_FILE_URL = 'http://127.0.0.1:8001/files'
    DRF_API_BASE_URL = "http://127.0.0.1:8002/api"  # URL DRF-сервиса
    DRF_API_HOST = "127.0.0.1" # или ""
    DEBUG = True
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
                'style': '{',
            },
            'simple': {
                'format': '{levelname} {message}',
                'style': '{',
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            },
        },
        'loggers': {
            'django.db.backends': {
                'level': 'DEBUG',
                'handlers': ['console'],
                'propagate': False,
            },
        },
    }

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'